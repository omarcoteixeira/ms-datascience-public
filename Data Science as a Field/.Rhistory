summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_male_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_female_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_male_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_female_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
# Show occurrencies on a map
if (!is.na(api_key)) {
print(api_key)
nyc_map <- get_map(location = "New York", maptype = "roadmap", )
ggmap::register_google(key = api_key, write = TRUE)
p = ggmap(nyc_map)
p + geom_point(data=nypd_shooting_cleaned, aes(x=Longitude, y=Latitude), color="red", alpha=0.5)
}
# plot
options(repr.plot.width = 20, repr.plot.height = 8)
nypd_shooting_by_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with murder") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_no_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with no murder") +
ylab("Number of shots") +
xlab("Year")
# Basic piechart
ggplot(nypd_shooting_by_sex, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex") +
theme_void()
ggplot(nypd_shooting_by_sex_with_no_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (No Murder)") +
theme_void()
ggplot(nypd_shooting_by_sex_with_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (Murder)") +
theme_void()
ggplot(nypd_shooting_by_male_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male shots by age range") +
theme_void()
ggplot(nypd_shooting_by_female_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female shots by age range") +
theme_void()
ggplot(nypd_shooting_female_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female Shots by race") +
theme_void()
ggplot(nypd_shooting_male_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male Shots by race") +
theme_void()
citation("ggmap")
install.packages('plyr', repos = "http://cran.us.r-project.org")
# Install required packages.
# Remember to add your own google maps key
install.packages("lubridate")
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
# To visualize the google maps used in this example you need to create your
# own google maps api key. You can use this site
# https://developers.google.com/maps/documentation/embed/get-api-key
api_key = Sys.getenv("MAPS_KEY", unset=NA)  # SET HERE YOUR OWN GOOGLE MAPS API KEY
install.packages("lubridate")
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("plyr", repos = "http://cran.us.r-project.org")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("ggmap")
install.packages("ggmap")
install.packages("patchwork")
citation("ggmap")
# Install required packages.
# Remember to add your own google maps key
install.packages("lubridate")
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
# To visualize the google maps used in this example you need to create your
# own google maps api key. You can use this site
# https://developers.google.com/maps/documentation/embed/get-api-key
api_key = Sys.getenv("MAPS_KEY", unset=NA)  # SET HERE YOUR OWN GOOGLE MAPS API KEY
# Importing useful libraries
library(ggmap)
library(lubridate)
library(dplyr)
library(tidyverse)
library(patchwork)
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("lubridate")
install.packages("lubridate")
install.packages("patchwork")
citation("ggmap")
# Install required packages.
# Remember to add your own google maps key
install.packages("lubridate")
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("ggmap")
install.packages("tidyverse")
install.packages("patchwork")
install.packages("lubridate")
install.packages("lubridate")
install.packages("patchwork")
# Importing useful libraries
library(ggmap)
library(lubridate)
library(dplyr)
library(tidyverse)
library(patchwork)
# To visualize the google maps used in this example you need to create your
# own google maps api key. You can use this site
# https://developers.google.com/maps/documentation/embed/get-api-key
api_key = Sys.getenv("MAPS_KEY", unset=NA)  # SET HERE YOUR OWN GOOGLE MAPS API KEY
# Data Collecting
url_base = "https://data.cityofnewyork.us/api/views/833y-fsy8/rows.csv?accessType=DOWNLOAD"
nypd_shooting_data_raw = read.csv(url_base, sep=",")
# Understanding the data
summary(nypd_shooting_data_raw)
head(nypd_shooting_data_raw)
nypd_shooting_cleaned = nypd_shooting_data_raw %>%
filter(JURISDICTION_CODE == 2, VIC_SEX != "U", PERP_AGE_GROUP != "1020") %>%
mutate(OCCUR_DATE = mdy(OCCUR_DATE)) %>%
unite("OCCUR_DATE_TIME", c(OCCUR_DATE, OCCUR_TIME), sep = " ", na.rm = TRUE, remove = FALSE) %>%
mutate(OCCUR_DATE_TIME = as_datetime(OCCUR_DATE_TIME), OCCUR_YEAR = year(OCCUR_DATE)) %>%
mutate(STATISTICAL_MURDER_FLAG = as.integer(as.logical(STATISTICAL_MURDER_FLAG))) %>%
select(-c(INCIDENT_KEY, OCCUR_TIME, PRECINCT, JURISDICTION_CODE, LOC_OF_OCCUR_DESC, LOC_CLASSFCTN_DESC, LOCATION_DESC, X_COORD_CD, Y_COORD_CD, Lon_Lat))
summary(nypd_shooting_cleaned)
head(nypd_shooting_cleaned)
# Create datasets based on multiple assumptions
# Shooting by Year and Sex
nypd_shooting_by_sex = nypd_shooting_cleaned %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_with_murder = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 1) %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_with_no_murder = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 0) %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_year = nypd_shooting_cleaned %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_murder_sex_year = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 1) %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_no_murder_sex_year = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 0) %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_male_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_female_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_male_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_female_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
# Show occurrencies on a map
if (!is.na(api_key)) {
print(api_key)
nyc_map <- get_map(location = "New York", maptype = "roadmap", )
ggmap::register_google(key = api_key, write = TRUE)
p = ggmap(nyc_map)
p + geom_point(data=nypd_shooting_cleaned, aes(x=Longitude, y=Latitude), color="red", alpha=0.5)
}
# plot
options(repr.plot.width = 20, repr.plot.height = 8)
nypd_shooting_by_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with murder") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_no_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with no murder") +
ylab("Number of shots") +
xlab("Year")
# Basic piechart
ggplot(nypd_shooting_by_sex, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex") +
theme_void()
ggplot(nypd_shooting_by_sex_with_no_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (No Murder)") +
theme_void()
ggplot(nypd_shooting_by_sex_with_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (Murder)") +
theme_void()
ggplot(nypd_shooting_by_male_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male shots by age range") +
theme_void()
ggplot(nypd_shooting_by_female_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female shots by age range") +
theme_void()
ggplot(nypd_shooting_female_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female Shots by race") +
theme_void()
ggplot(nypd_shooting_male_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male Shots by race") +
theme_void()
knit_with_parameters("~/projects/learning/ms-datascience-public/Data Science as a Field/Project.Rmd")
knit_with_parameters("~/projects/learning/ms-datascience-public/Data Science as a Field/Project.Rmd")
knitr::opts_chunk$set(cache = TRUE)
# Importing useful libraries
library(ggmap)
library(lubridate)
library(dplyr)
library(tidyverse)
library(patchwork)
# To visualize the google maps used in this example you need to create your
# own google maps api key. You can use this site
# https://developers.google.com/maps/documentation/embed/get-api-key
api_key = Sys.getenv("MAPS_KEY", unset=NA)  # SET HERE YOUR OWN GOOGLE MAPS API KEY
# Data Collecting
url_base = "https://data.cityofnewyork.us/api/views/833y-fsy8/rows.csv?accessType=DOWNLOAD"
nypd_shooting_data_raw = read.csv(url_base, sep=",")
# Understanding the data
summary(nypd_shooting_data_raw)
head(nypd_shooting_data_raw)
nypd_shooting_cleaned = nypd_shooting_data_raw %>%
filter(JURISDICTION_CODE == 2, VIC_SEX != "U", PERP_AGE_GROUP != "1020") %>%
mutate(OCCUR_DATE = mdy(OCCUR_DATE)) %>%
unite("OCCUR_DATE_TIME", c(OCCUR_DATE, OCCUR_TIME), sep = " ", na.rm = TRUE, remove = FALSE) %>%
mutate(OCCUR_DATE_TIME = as_datetime(OCCUR_DATE_TIME), OCCUR_YEAR = year(OCCUR_DATE)) %>%
mutate(STATISTICAL_MURDER_FLAG = as.integer(as.logical(STATISTICAL_MURDER_FLAG))) %>%
select(-c(INCIDENT_KEY, OCCUR_TIME, PRECINCT, JURISDICTION_CODE, LOC_OF_OCCUR_DESC, LOC_CLASSFCTN_DESC, LOCATION_DESC, X_COORD_CD, Y_COORD_CD, Lon_Lat))
summary(nypd_shooting_cleaned)
head(nypd_shooting_cleaned)
# Create datasets based on multiple assumptions
# Shooting by Year and Sex
nypd_shooting_by_sex = nypd_shooting_cleaned %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_with_murder = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 1) %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_with_no_murder = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 0) %>%
group_by(VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_sex_year = nypd_shooting_cleaned %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_murder_sex_year = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 1) %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_no_murder_sex_year = nypd_shooting_cleaned %>%
filter(STATISTICAL_MURDER_FLAG == 0) %>%
group_by(OCCUR_YEAR, VIC_SEX) %>%
summarise(count_shoots = n(), .groups = 'drop')
nypd_shooting_by_male_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_female_age_range = nypd_shooting_cleaned %>%
filter(!is.na(PERP_AGE_GROUP), PERP_AGE_GROUP != "", PERP_AGE_GROUP != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_AGE_GROUP) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_male_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "M") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
nypd_shooting_female_by_race = nypd_shooting_cleaned %>%
filter(!is.na(PERP_RACE), PERP_RACE != "", PERP_RACE != "(null)" ) %>%
filter(VIC_SEX == "F") %>%
group_by(PERP_RACE) %>%
summarise(count_shoots = n(), .groups = 'drop') %>%
mutate(perc = (count_shoots / sum(count_shoots))*100) %>%
mutate(percentage = round(perc, 2))
# Show occurrencies on a map
if (!is.na(api_key)) {
print(api_key)
nyc_map <- get_map(location = "New York", maptype = "roadmap", )
ggmap::register_google(key = api_key, write = TRUE)
p = ggmap(nyc_map)
p + geom_point(data=nypd_shooting_cleaned, aes(x=Longitude, y=Latitude), color="red", alpha=0.5)
}
# plot
options(repr.plot.width = 20, repr.plot.height = 8)
nypd_shooting_by_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with murder") +
ylab("Number of shots") +
xlab("Year")
nypd_shooting_by_no_murder_sex_year %>%
ggplot(aes(x=OCCUR_YEAR, y=count_shoots, group=VIC_SEX, color=VIC_SEX)) +
geom_line() +
ggtitle("Shots by Sex with no murder") +
ylab("Number of shots") +
xlab("Year")
# Basic piechart
ggplot(nypd_shooting_by_sex, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex") +
theme_void()
ggplot(nypd_shooting_by_sex_with_no_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (No Murder)") +
theme_void()
ggplot(nypd_shooting_by_sex_with_murder, aes(x="", y=percentage, fill=VIC_SEX)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Shots by Sex (Murder)") +
theme_void()
ggplot(nypd_shooting_by_male_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male shots by age range") +
theme_void()
ggplot(nypd_shooting_by_female_age_range, aes(x="", y=percentage, fill=PERP_AGE_GROUP)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(label = paste0(percentage, "%")), color="white",
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female shots by age range") +
theme_void()
ggplot(nypd_shooting_female_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Female Shots by race") +
theme_void()
ggplot(nypd_shooting_male_by_race, aes(x="", y=percentage, fill=PERP_RACE)) +
geom_bar(stat="identity", width=1, color="white") +
geom_text(aes(x=1.65, label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5)) +
coord_polar("y", start=0) +
ggtitle("Male Shots by race") +
theme_void()
pwd
exit
exit()
setwd("~/projects/learning/ms-datascience-public/Data Science as a Field")
